export declare abstract class BaseNode {
    type: string;
    [name: string]: unknown;
    equals(other: BaseNode, ignoredFields?: Array<string>): boolean;
    clone(): BaseNode;
}
export declare abstract class SyntaxNode extends BaseNode {
    type: string;
    span?: Span;
    addSpan(start: number, end: number): void;
}
export declare class Resource extends SyntaxNode {
    type: "Resource";
    body: Array<Entry | Junk>;
    constructor(body?: Array<Entry | Junk>);
}
export declare abstract class Entry extends SyntaxNode {
    type: string;
}
export declare class Message extends Entry {
    type: "Message";
    id: Identifier;
    value: Pattern | null;
    attributes: Array<Attribute>;
    comment: Comment | null;
    constructor(id: Identifier, value?: Pattern | null, attributes?: Array<Attribute>, comment?: Comment | null);
}
export declare class Term extends Entry {
    type: "Term";
    id: Identifier;
    value: Pattern;
    attributes: Array<Attribute>;
    comment: Comment | null;
    constructor(id: Identifier, value: Pattern, attributes?: Array<Attribute>, comment?: Comment | null);
}
export declare class Pattern extends SyntaxNode {
    type: "Pattern";
    elements: Array<PatternElement>;
    constructor(elements: Array<PatternElement>);
}
export declare abstract class PatternElement extends SyntaxNode {
    type: string;
}
export declare class TextElement extends PatternElement {
    type: "TextElement";
    value: string;
    constructor(value: string);
}
export declare class Placeable extends PatternElement {
    type: "Placeable";
    expression: Expression;
    constructor(expression: Expression);
}
export declare abstract class Expression extends SyntaxNode {
    type: string;
}
export declare abstract class Literal extends Expression {
    type: string;
    value: string;
    constructor(value: string);
    abstract parse(): {
        value: unknown;
    };
}
export declare class StringLiteral extends Literal {
    type: "StringLiteral";
    parse(): {
        value: string;
    };
}
export declare class NumberLiteral extends Literal {
    type: "NumberLiteral";
    parse(): {
        value: number;
        precision: number;
    };
}
export declare class MessageReference extends Expression {
    type: "MessageReference";
    id: Identifier;
    attribute: Identifier | null;
    constructor(id: Identifier, attribute?: Identifier | null);
}
export declare class TermReference extends Expression {
    type: "TermReference";
    id: Identifier;
    attribute: Identifier | null;
    arguments: CallArguments | null;
    constructor(id: Identifier, attribute?: Identifier | null, args?: CallArguments | null);
}
export declare class VariableReference extends Expression {
    type: "VariableReference";
    id: Identifier;
    constructor(id: Identifier);
}
export declare class FunctionReference extends Expression {
    type: "FunctionReference";
    id: Identifier;
    arguments: CallArguments;
    constructor(id: Identifier, args: CallArguments);
}
export declare class SelectExpression extends Expression {
    type: "SelectExpression";
    selector: Expression;
    variants: Array<Variant>;
    constructor(selector: Expression, variants: Array<Variant>);
}
export declare class CallArguments extends SyntaxNode {
    type: "CallArguments";
    positional: Array<Expression>;
    named: Array<NamedArgument>;
    constructor(positional?: Array<Expression>, named?: Array<NamedArgument>);
}
export declare class Attribute extends SyntaxNode {
    type: "Attribute";
    id: Identifier;
    value: Pattern;
    constructor(id: Identifier, value: Pattern);
}
export declare class Variant extends SyntaxNode {
    type: "Variant";
    key: Identifier | NumberLiteral;
    value: Pattern;
    default: boolean;
    constructor(key: Identifier | NumberLiteral, value: Pattern, def: boolean);
}
export declare class NamedArgument extends SyntaxNode {
    type: "NamedArgument";
    name: Identifier;
    value: Literal;
    constructor(name: Identifier, value: Literal);
}
export declare class Identifier extends SyntaxNode {
    type: "Identifier";
    name: string;
    constructor(name: string);
}
export declare abstract class BaseComment extends Entry {
    type: string;
    content: string;
    constructor(content: string);
}
export declare class Comment extends BaseComment {
    type: "Comment";
}
export declare class GroupComment extends BaseComment {
    type: "GroupComment";
}
export declare class ResourceComment extends BaseComment {
    type: "ResourceComment";
}
export declare class Junk extends SyntaxNode {
    type: "Junk";
    annotations: Array<Annotation>;
    content: string;
    constructor(content: string);
    addAnnotation(annotation: Annotation): void;
}
export declare class Span extends BaseNode {
    type: string;
    start: number;
    end: number;
    constructor(start: number, end: number);
}
export declare class Annotation extends SyntaxNode {
    type: string;
    code: string;
    arguments: Array<unknown>;
    message: string;
    constructor(code: string, args: unknown[] | undefined, message: string);
}
